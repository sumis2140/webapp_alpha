{"ast":null,"code":"var _jsxFileName = \"/home/fraction/Music/Vsumm_webapp/src/components/Grid-Table/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Grid, Button } from '@material-ui/core';\nimport FormDialog from './components/dialog';\nconst initialValue = {\n  name: \"\",\n  email: \"\",\n  phone: \"\",\n  videolink: \"\"\n};\n\nfunction Gridpopup() {\n  const actionButton = params => {\n    setOpen(true); // <ReactPlayer url='https://www.youtube.com/watch?v=uMQnn8xU7qs' />\n  };\n\n  const [gridApi, setGridApi] = useState(null);\n  const [tableData, setTableData] = useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [formData, setFormData] = useState(initialValue);\n\n  const handleClose = () => {\n    setOpen(false);\n    setFormData(initialValue);\n  };\n\n  const url = `https://vsumm.github.io/jsonapi/db.json`;\n  const columnDefs = [{\n    headerName: \"ID\",\n    field: \"id\"\n  }, {\n    headerName: \"Name\",\n    field: \"name\"\n  }, {\n    headerName: \"Email\",\n    field: \"email\"\n  }, {\n    headerName: \"Phone\",\n    field: \"phone\"\n  }, {\n    headerName: \"VideoLink\",\n    field: \"dob\"\n  }, {\n    headerName: \"Actions\",\n    field: \"dob\",\n    cellRendererFramework: params => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 79\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      size: \"medium\",\n      color: \"primary\",\n      onClick: () => actionButton(params),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Play\"))\n  }]; // calling getUsers function for first time \n\n  useEffect(() => {\n    getUsers();\n  }, []); //fetching user data from server\n\n  const getUsers = () => {\n    fetch(url).then(resp => resp.json()).then(resp => setTableData(resp));\n  };\n\n  const onChange = e => {\n    const {\n      value,\n      id\n    } = e.target; // console.log(value,id)\n\n    setFormData({ ...formData,\n      [id]: value\n    });\n  };\n\n  const onGridReady = params => {\n    setGridApi(params);\n  }; //deleting a user\n\n\n  const handleDelete = id => {\n    const confirm = window.confirm(\"Are you sure, you want to delete this row\", id);\n\n    if (confirm) {\n      fetch(url + `/${id}`, {\n        method: \"DELETE\"\n      }).then(resp => resp.json()).then(resp => getUsers());\n    }\n  };\n\n  const handleFormSubmit = () => {\n    if (formData.id) {\n      //updating a user \n      const confirm = window.confirm(\"Are you sure, you want to update this row ?\");\n      confirm && fetch(url + `/${formData.id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(formData),\n        headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json()).then(resp => {\n        handleClose();\n        getUsers();\n      });\n    } else {\n      // adding new user\n      fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(formData),\n        headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json()).then(resp => {\n        handleClose();\n        getUsers();\n      });\n    }\n  };\n\n  const defaultColDef = {\n    sortable: true,\n    flex: 1,\n    filter: true,\n    floatingFilter: true\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"Fraction Webapp\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Fraction video Player\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: '400px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AgGridReact, {\n    rowData: tableData,\n    columnDefs: columnDefs,\n    defaultColDef: defaultColDef,\n    onGridReady: onGridReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FormDialog, {\n    open: open,\n    handleClose: handleClose,\n    data: formData,\n    onChange: onChange,\n    handleFormSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default gridpop;","map":{"version":3,"sources":["/home/fraction/Music/Vsumm_webapp/src/components/Grid-Table/App.js"],"names":["React","useState","useEffect","AgGridReact","Grid","Button","FormDialog","initialValue","name","email","phone","videolink","Gridpopup","actionButton","params","setOpen","gridApi","setGridApi","tableData","setTableData","open","formData","setFormData","handleClose","url","columnDefs","headerName","field","cellRendererFramework","getUsers","fetch","then","resp","json","onChange","e","value","id","target","onGridReady","handleDelete","confirm","window","method","handleFormSubmit","body","JSON","stringify","headers","defaultColDef","sortable","flex","filter","floatingFilter","height","gridpop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { Grid, Button } from '@material-ui/core'\nimport FormDialog from './components/dialog';\nconst initialValue = { name: \"\", email: \"\", phone: \"\", videolink: \"\" }\nfunction Gridpopup() {\n  const actionButton = (params) => {\n    setOpen(true)\n    // <ReactPlayer url='https://www.youtube.com/watch?v=uMQnn8xU7qs' />\n    \n  }\n\n  const [gridApi, setGridApi] = useState(null)\n  const [tableData, setTableData] = useState(null)\n  const [open, setOpen] = React.useState(false);\n  const [formData, setFormData] = useState(initialValue)\n  \n\n  const handleClose = () => {\n    setOpen(false);\n    setFormData(initialValue)\n  };\n  const url = `https://vsumm.github.io/jsonapi/db.json`\n  const columnDefs = [\n    { headerName: \"ID\", field: \"id\" },\n    { headerName: \"Name\", field: \"name\", },\n    { headerName: \"Email\", field: \"email\", },\n    { headerName: \"Phone\", field: \"phone\" },\n    { headerName: \"VideoLink\", field: \"dob\" },\n    {\n      headerName: \"Actions\", field: \"dob\", cellRendererFramework: (params) => <div>\n        <Button variant=\"contained\" size=\"medium\" color=\"primary\" onClick={()=> actionButton(params)} >Play</Button>\n        {/* <Button variant=\"outlined\" color=\"secondary\" onClick={() => handleDelete(params.value)}>Delete</Button> */}\n        \n      </div>\n   \n    }\n    \n  ]\n  // calling getUsers function for first time \n  useEffect(() => {\n    getUsers()\n  }, [])\n\n  //fetching user data from server\n  const getUsers = () => {\n    fetch(url).then(resp => resp.json()).then(resp => setTableData(resp))\n  }\n  const onChange = (e) => {\n    const { value, id } = e.target\n    // console.log(value,id)\n    setFormData({ ...formData, [id]: value })\n  }\n  const onGridReady = (params) => {\n    setGridApi(params)\n  }\n\n  \n  //deleting a user\n  const handleDelete = (id) => {\n    const confirm = window.confirm(\"Are you sure, you want to delete this row\", id)\n    if (confirm) {\n      fetch(url + `/${id}`, { method: \"DELETE\" }).then(resp => resp.json()).then(resp => getUsers())\n\n    }\n  }\n  const handleFormSubmit = () => {\n    if (formData.id) {\n      //updating a user \n      const confirm = window.confirm(\"Are you sure, you want to update this row ?\")\n      confirm && fetch(url + `/${formData.id}`, {\n        method: \"PUT\", body: JSON.stringify(formData), headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json())\n        .then(resp => {\n          handleClose()\n          getUsers()\n\n        })\n    } else {\n      // adding new user\n      fetch(url, {\n        method: \"POST\", body: JSON.stringify(formData), headers: {\n          'content-type': \"application/json\"\n        }\n      }).then(resp => resp.json())\n        .then(resp => {\n          handleClose()\n          getUsers()\n        })\n    }\n  }\n\n  const defaultColDef = {\n    sortable: true,\n    flex: 1, filter: true,\n    floatingFilter: true\n  }\n  return (\n    <div className=\"App\">\n      <h1 align=\"center\">Fraction Webapp</h1>\n      <h3>Fraction video Player</h3>\n     \n      <div className=\"ag-theme-alpine\" style={{ height: '400px' }}>\n        <AgGridReact\n          rowData={tableData}\n          columnDefs={columnDefs}\n          defaultColDef={defaultColDef}\n          onGridReady={onGridReady}\n        />\n      </div>\n      <FormDialog open={open} handleClose={handleClose}\n        data={formData} onChange={onChange} handleFormSubmit={handleFormSubmit} />\n    </div>\n  );\n}\n\nexport default gridpop;"]},"metadata":{},"sourceType":"module"}