{"ast":null,"code":"var _jsxFileName = \"/home/fraction/Music/Fraction-webapp/src/components/pages/Services.js\";\nimport \"../../App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport Grid from \"../Grid-Table/grid\";\nimport LandingPage from \"../Videoplayer/LandingPage\";\nconst dateFilterParams = {\n  comparator: function (filterLocalDateAtMidnight, cellValue) {\n    var dateAsString = cellValue;\n    if (dateAsString == null) return -1;\n    var dateParts = dateAsString.split(\"-\");\n    var cellDate = new Date(Number(dateParts[2]), Number(dateParts[1]) - 1, Number(dateParts[0]));\n\n    if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n      return 0;\n    }\n\n    if (cellDate < filterLocalDateAtMidnight) {\n      return -1;\n    }\n\n    if (cellDate > filterLocalDateAtMidnight) {\n      return 1;\n    }\n  },\n  browserDatePicker: true\n};\n\nfunction App() {\n  const [gridApi, setGridApi] = useState();\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const rowData = [{\n    company: \"Toyota\",\n    Floor: \"Celica\",\n    time: 35000,\n    date: \"29-03-2022\"\n  }, {\n    company: \"Ford\",\n    Floor: \"Mondeo\",\n    time: 32000,\n    date: \"31-03-2022\"\n  }, {\n    company: \"Porsche\",\n    Floor: \"Boxter\",\n    time: 72000,\n    date: \"30-03-2022\"\n  }, {\n    company: \"Mers\",\n    Floor: \"Mers\",\n    time: 92000,\n    date: \"28-03-2022\"\n  }, {\n    company: \"Mers\",\n    Floor: \"Mers\",\n    time: 92000,\n    date: \"27-03-2022\"\n  }];\n  const columns = [{\n    headerName: \"company\",\n    field: \"company\"\n  }, {\n    headerName: \"time\",\n    field: \"time\"\n  }, {\n    headerName: \"Floor\",\n    field: \"Floor\"\n  }, {\n    headerName: \"Date\",\n    field: \"date\",\n    filter: \"agDateColumnFilter\",\n    filterParams: dateFilterParams\n  }];\n  const defColumnDefs = {\n    flex: 1\n  };\n\n  const onGridReady = params => {\n    setGridApi(params);\n  };\n\n  const getFilterType = () => {\n    if (startDate !== \"\" && endDate !== \"\") return \"inRange\";else if (startDate !== \"\") return \"greaterThan\";else if (endDate !== \"\") return \"lessThan\";\n  };\n\n  useEffect(() => {\n    if (gridApi) {\n      if (startDate !== \"\" && endDate !== \"\" && startDate > endDate) {\n        alert(\"Start Date should be before End Date\");\n        setEndDate(\"\");\n      } else {\n        var dateFilterComponent = gridApi.api.getFilterInstance(\"date\");\n        dateFilterComponent.setFloor({\n          type: getFilterType(),\n          dateFrom: startDate ? startDate : endDate,\n          dateTo: endDate\n        });\n        gridApi.api.onFilterChanged();\n      }\n    }\n  }, [startDate, endDate]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Fraction Daterange Picker\"), /*#__PURE__*/React.createElement(\"p\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Date Range Filtering \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 400\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"From :\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: startDate,\n    onChange: e => setStartDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), \"To :\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: endDate,\n    onChange: e => setEndDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(AgGridReact, {\n    rowData: rowData,\n    columnDefs: columns,\n    defaultColDef: defColumnDefs,\n    onGridReady: onGridReady,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/fraction/Music/Fraction-webapp/src/components/pages/Services.js"],"names":["React","useEffect","useState","AgGridReact","Grid","LandingPage","dateFilterParams","comparator","filterLocalDateAtMidnight","cellValue","dateAsString","dateParts","split","cellDate","Date","Number","getTime","browserDatePicker","App","gridApi","setGridApi","startDate","setStartDate","endDate","setEndDate","rowData","company","Floor","time","date","columns","headerName","field","filter","filterParams","defColumnDefs","flex","onGridReady","params","getFilterType","alert","dateFilterComponent","api","getFilterInstance","setFloor","type","dateFrom","dateTo","onFilterChanged","height","e","target","value"],"mappings":"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","sourcesContent":["import \"../../App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport Grid from \"../Grid-Table/grid\";\nimport LandingPage from \"../Videoplayer/LandingPage\"\n\nconst dateFilterParams = {\n  comparator: function (filterLocalDateAtMidnight, cellValue) {\n    var dateAsString = cellValue;\n    if (dateAsString == null) return -1;\n    var dateParts = dateAsString.split(\"-\");\n    var cellDate = new Date(\n      Number(dateParts[2]),\n      Number(dateParts[1]) - 1,\n      Number(dateParts[0])\n    );\n    if (filterLocalDateAtMidnight.getTime() === cellDate.getTime()) {\n      return 0;\n    }\n    if (cellDate < filterLocalDateAtMidnight) {\n      return -1;\n    }\n    if (cellDate > filterLocalDateAtMidnight) {\n      return 1;\n    }\n  },\n  browserDatePicker: true,\n};\n\nfunction App() {\n  const [gridApi, setGridApi] = useState();\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const rowData = [\n    { company: \"Toyota\", Floor: \"Celica\", time: 35000, date: \"29-03-2022\" },\n    { company: \"Ford\", Floor: \"Mondeo\", time: 32000, date: \"31-03-2022\" },\n    { company: \"Porsche\", Floor: \"Boxter\", time: 72000, date: \"30-03-2022\" },\n    { company: \"Mers\", Floor: \"Mers\", time: 92000, date: \"28-03-2022\" },\n    { company: \"Mers\", Floor: \"Mers\", time: 92000, date: \"27-03-2022\" },\n  ];\n\n  const columns = [\n    { headerName: \"company\", field: \"company\" },\n    { headerName: \"time\", field: \"time\" },\n    { headerName: \"Floor\", field: \"Floor\" },\n    {\n      headerName: \"Date\",\n      field: \"date\",\n      filter: \"agDateColumnFilter\",\n      filterParams: dateFilterParams,\n    },\n  ];\n  const defColumnDefs = { flex: 1 };\n\n  const onGridReady = (params) => {\n    setGridApi(params);\n  };\n  const getFilterType = () => {\n    if (startDate !== \"\" && endDate !== \"\") return \"inRange\";\n    else if (startDate !== \"\") return \"greaterThan\";\n    else if (endDate !== \"\") return \"lessThan\";\n  };\n  useEffect(() => {\n    if (gridApi) {\n      if (startDate !== \"\" && endDate !== \"\" && startDate > endDate) {\n        alert(\"Start Date should be before End Date\");\n        setEndDate(\"\");\n      } else {\n        var dateFilterComponent = gridApi.api.getFilterInstance(\"date\");\n        dateFilterComponent.setFloor({\n          type: getFilterType(),\n          dateFrom: startDate ? startDate : endDate,\n          dateTo: endDate,\n        });\n        gridApi.api.onFilterChanged();\n      }\n    }\n  }, [startDate, endDate]);\n  return (\n    <div className=\"App\">\n      <h2 align=\"center\">Fraction Daterange Picker</h2>\n      <p align=\"center\">Date Range Filtering </p>\n      <div className=\"ag-theme-alpine\" style={{ height: 400 }}>\n        From :{\" \"}\n        <input\n          type=\"date\"\n          value={startDate}\n          onChange={(e) => setStartDate(e.target.value)}\n        />\n        To :{\" \"}\n        <input\n          type=\"date\"\n          value={endDate}\n          onChange={(e) => setEndDate(e.target.value)}\n        />\n        <AgGridReact\n          rowData={rowData}\n          columnDefs={columns}\n          defaultColDef={defColumnDefs}\n          onGridReady={onGridReady}\n        />\n      </div>\n      <br />\n      <br />\n      <br />\n      <br />\n      <Grid />\n      <br />\n      <br />\n      <br />\n      <br />\n      \n      {/* <LandingPage /> */}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}